# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-31 05:13
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djchoices.choices
import relativefilepathfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractTile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.PositiveIntegerField(help_text='Номер строки')),
                ('column', models.PositiveIntegerField(help_text='Номер колонки')),
                ('ejudge_short_name', models.CharField(db_index=True, max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('statement_file_name', relativefilepathfield.fields.RelativeFilePathField(match='.*\\.pdf', path=settings.PROBLEMS_STATEMENTS_DIR)),
                ('automatic_open_time', models.PositiveIntegerField(blank=True, default=None, help_text='Время в минутах, после которого задача откроется автоматически. Если NULL, то не откроется', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TileStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveIntegerField(choices=[(0, 'Closed'), (1, 'Opened'), (2, 'Read'), (3, 'Tried'), (4, 'Solved')], db_index=True, validators=[djchoices.choices.ChoicesValidator({0: 'Closed', 1: 'Opened', 2: 'Read', 3: 'Tried', 4: 'Solved'})])),
            ],
            options={
                'ordering': ['status'],
            },
        ),
        migrations.CreateModel(
            name='AbstractBonus',
            fields=[
                ('abstracttile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='map.AbstractTile')),
            ],
            options={
                'abstract': False,
            },
            bases=('map.abstracttile',),
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('abstracttile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='map.AbstractTile')),
                ('solved_award', models.PositiveIntegerField(help_text='Приз за правильное решение задачи')),
                ('wrong_penalty', models.PositiveIntegerField(help_text='Штраф за неправильную попытку')),
            ],
            options={
                'abstract': False,
            },
            bases=('map.abstracttile',),
        ),
        migrations.AddField(
            model_name='tilestatus',
            name='tile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='map.AbstractTile'),
        ),
        migrations.AddField(
            model_name='tilestatus',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiles_statuses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstracttile',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_map.abstracttile_set+', to='contenttypes.ContentType'),
        ),
        migrations.CreateModel(
            name='CallMasterBonus',
            fields=[
                ('abstractbonus_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='map.AbstractBonus')),
            ],
            options={
                'abstract': False,
            },
            bases=('map.abstractbonus',),
        ),
        migrations.CreateModel(
            name='GetAnyTestBonus',
            fields=[
                ('abstractbonus_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='map.AbstractBonus')),
            ],
            options={
                'abstract': False,
            },
            bases=('map.abstractbonus',),
        ),
        migrations.CreateModel(
            name='GetTangerinesBonus',
            fields=[
                ('abstractbonus_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='map.AbstractBonus')),
            ],
            options={
                'abstract': False,
            },
            bases=('map.abstractbonus',),
        ),
        migrations.CreateModel(
            name='OpenAnyTileBonus',
            fields=[
                ('abstractbonus_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='map.AbstractBonus')),
            ],
            options={
                'abstract': False,
            },
            bases=('map.abstractbonus',),
        ),
        migrations.CreateModel(
            name='OpenWideLocalityBonus',
            fields=[
                ('abstractbonus_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='map.AbstractBonus')),
            ],
            options={
                'abstract': False,
            },
            bases=('map.abstractbonus',),
        ),
    ]
